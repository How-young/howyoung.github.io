<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git学习笔记</title>
      <link href="/2021/06/10/git-xue-xi-bi-ji/"/>
      <url>/2021/06/10/git-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><h2 id="Git概述"><a href="#Git概述" class="headerlink" title="Git概述"></a>Git概述</h2><p>git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><blockquote><p>Git 是一个<a href="https://git-scm.com/about/free-and-open-source">免费的开源</a> 分布式版本控制系统，旨在快速高效地处理从小到大的所有项目。</p><p>Git<a href="https://git-scm.com/doc">易于学习</a>， <a href="https://git-scm.com/about/small-and-fast">占用空间小，性能极快</a>。它的性能优于 Subversion、CVS、Perforce 和 ClearCase 等 SCM 工具，具有<a href="https://git-scm.com/about/branching-and-merging">便宜的本地分支</a>、方便的<a href="https://git-scm.com/about/staging-area">暂存区</a>和 <a href="https://git-scm.com/about/distributed">多个工作流等功能</a>。</p></blockquote><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul><li>版本控制是一种记录文件内容变化，一边将来查阅特定版本修订情况的系统。</li><li>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。</li></ul><h3 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h3><h4 id="分布式版本控制工具"><a href="#分布式版本控制工具" class="headerlink" title="分布式版本控制工具"></a>分布式版本控制工具</h4><ul><li>像Git这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来(本地库)。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。</li><li>分布式的版本控制系统出现之后解决了集中式版本控制系统的缺陷：<ul><li>服务器断网的情况下也可以进行开发(因为版本控制是在本地进行的)</li><li>每个客户端保存的也都是整个完整的项目(包含历史记录，更加安全)</li></ul></li></ul><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610082741008.png" alt="分布式版本控制架构图"></p><h4 id="集中式版本控制工具"><a href="#集中式版本控制工具" class="headerlink" title="集中式版本控制工具"></a>集中式版本控制工具</h4><ul><li>集中化的版本控制系统诸如CVS、SWN等,都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。把集中管理的服务器看作是图书馆，当你要修改一本书时，要先从图书馆借出来，然后修改完成之后在还回去。</li><li>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限,并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</li><li>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新,也就无法协同工作。</li></ul><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610082041030.png" alt="集中式版本控制架构图"></p><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610085134741.png" alt="Git工作机制"></p><p>在工作区和暂存区可以进行删除，在本地库形成历史版本后将无法删除。</p><h3 id="代码托管中心"><a href="#代码托管中心" class="headerlink" title="代码托管中心"></a>代码托管中心</h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般称为远程库</p><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><p>Git手册：<a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p><p>Git常用命令及其方法大全：<a href="https://blog.csdn.net/web_csdn_share/article/details/79243308">https://blog.csdn.net/web_csdn_share/article/details/79243308</a></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git init</td><td>初始化本地仓库</td></tr><tr><td>git add [file1] [file2]</td><td>添加到暂存区</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git commi -m “[log]”[name]</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset --hard 版本号</td><td>版本穿梭</td></tr><tr><td>git clone url</td><td>从url克隆项目</td></tr></tbody></table><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。(分支底层其实也是指针的引用)</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610115238291.png" alt="分支示例图"></p><p>分支的好处：</p><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败<br>的分支删除重新开始即可。  </li></ul><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token punctuation">[</span>name<span class="token punctuation">]</span></code></pre><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -v</code></pre><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>name<span class="token punctuation">]</span></code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 把指定分支合并到当前分支上</span><span class="token function">git</span> merge <span class="token punctuation">[</span>name<span class="token punctuation">]</span></code></pre><p>合并分支可能会产生冲突：</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610115652425.png" alt="冲突"></p><p><strong>冲突产生的原因</strong>：<br>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。 Git 无法替我们决定使用哪一个。所以必须人为决定新代码内容  。</p><p><strong>解决冲突</strong>：</p><ol><li><p>编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><p>特殊符号：</p><p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;HEAD</code> 当前分支的代码 <code>==========</code> 合并过来的代码 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;XXXXX</code></p></li><li><p>添加到暂存区</p></li><li><p>执行提交（<font color="red">注意：此时使用<code>git&nbsp;commit</code>命令时不能带文件名</font>）</p></li></ol><h3 id="创建和切换分支图解"><a href="#创建和切换分支图解" class="headerlink" title="创建和切换分支图解"></a>创建和切换分支图解</h3><p> <img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610125544172.png" alt="创建和切换分支图解"></p><ul><li>master、 hotfix 其实都是指向具体版本记录的指针。当前所在的分支，其实是由<code>head</code>决定的。所以创建分支的本质就是多创建一个指针。</li><li><code>head</code>如果指向 master，那么我们现在就在 master 分支上。<br><code>head</code> 如果执行 hotfix，那么我们现在就在 hotfix 分支上。  </li><li>所以切换分支的本质就是移动head指针</li></ul><h2 id="Git团队协作机制"><a href="#Git团队协作机制" class="headerlink" title="Git团队协作机制"></a>Git团队协作机制</h2><h3 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h3><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610125755981.png" alt="团队内协作"></p><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610125854069.png" alt="跨团队协作"></p><h2 id="GitHub操作"><a href="#GitHub操作" class="headerlink" title="GitHub操作"></a>GitHub操作</h2><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr></tbody></table><h3 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h3><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C xxxxxx@XXXX.XXX   <span class="token comment" spellcheck="true"># 你的邮箱，下面一路回车就行</span></code></pre><pre class=" language-bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/c/Users/Layne/.ssh/id_rsa<span class="token punctuation">)</span>:Created directory <span class="token string">'/c/Users/Layne/.ssh'</span><span class="token keyword">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> /c/Users/Layne/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /c/Users/Layne/.ssh/id_rsa.pub.The key fingerprint is:SHA256:7CPfRLITKcYDhaqpEDeok7Atvwh2reRmpxxOC6dkY44atguiguyueyue@aliyun.comThe key's randomart image is:+---<span class="token punctuation">[</span>RSA 2048<span class="token punctuation">]</span>----+<span class="token operator">|</span> <span class="token punctuation">..</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token punctuation">..</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">.</span> <span class="token punctuation">..</span> <span class="token operator">|</span><span class="token operator">|</span>+ + o <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token operator">|</span><span class="token operator">|</span>oO <span class="token keyword">.</span> <span class="token operator">=</span> S <span class="token keyword">.</span> <span class="token operator">|</span><span class="token operator">|</span>X <span class="token keyword">.</span> <span class="token punctuation">..</span> + <span class="token operator">=</span> <span class="token operator">|</span><span class="token operator">|</span>+@ * <span class="token punctuation">..</span> <span class="token operator">=</span> <span class="token keyword">.</span> <span class="token operator">|</span><span class="token operator">|</span>X.<span class="token operator">&amp;</span>o+. o <span class="token operator">=</span> <span class="token operator">|</span><span class="token operator">|</span>Eo+Oo <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys  </p><p><img src="https://gitee.com/sehowyoung/images/raw/master/%E9%85%8D%E7%BD%AE.gif" alt="git与GitHub连接配置"></p><h2 id="IDEA集成Git"><a href="#IDEA集成Git" class="headerlink" title="IDEA集成Git"></a>IDEA集成Git</h2><h3 id="配置git忽略文件"><a href="#配置git忽略文件" class="headerlink" title="配置git忽略文件"></a>配置git忽略文件</h3><p>忽略IDEA自动生成的<code>.idea</code>和<code>xxxx.iml</code>文件</p><blockquote><ol><li><p>为什么要忽略他们？</p><p>与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之<br>间的差异。  </p></li><li><p>怎么忽略？</p><ol><li><p>创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore）这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用户家目录下。<br>git.ignore 文件模版内容如下：</p><pre class=" language-txt"><code class="language-txt">\# Compiled class file*.class  # Log file*.log# BlueJ files*.ctxt# Mobile Tools for Java (J2ME).mtj.tmp/# Package Files #*.jar*.war*.nar*.ear*.zip*.tar.gz*.rar# virtual machine crash logs, seehttp://www.java.com/en/download/help/error_hotspot.xmlhs_err_pid*.classpath.project.settingstarget.idea*.iml</code></pre></li><li><p>在.gitconfig文件中引用忽略配置文件</p><pre class=" language-txt"><code class="language-txt">[user]name = Layneemail = Layne@atguigu.com[core]excludesfile = C:/Users/asus/git.ignore</code></pre><p>==注意：这里要使用“正斜线（/）”，不要使用“反斜线（\）”==</p></li></ol></li></ol></blockquote><h3 id="定位git程序"><a href="#定位git程序" class="headerlink" title="定位git程序"></a>定位git程序</h3><p><code>File</code>–&gt;<code>Settings</code>–&gt;<code>Version Control</code>–&gt;<code>Git</code>–&gt;<code>Path to Git executable：</code>选择自己的git安装目录–&gt;<code>Test</code></p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610150457470.png" alt="IDEA定位Git"></p><h3 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h3><p><code>VCS</code>–&gt;<code>Import into Version Control</code>–&gt;<code>Create Git Respository</code>–&gt;选择要创建Git本地仓库的工程/项目</p><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><p>右键点击项目，选择<code>Git</code>–&gt;<code>Add</code>将项目添加到暂存区</p><h3 id="提交到本地库"><a href="#提交到本地库" class="headerlink" title="提交到本地库"></a>提交到本地库</h3><p><code>Git</code>–&gt;<code>Commit Directory</code>–&gt;<code>Commit Message</code>–&gt;<code>Commit</code></p><h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p>在IDEA左下角，点击<code>Version Control</code>–&gt;<code>Log</code>查看版本–&gt;右键选择要切换的版本–&gt;菜单里点击<code>Checkout Revision</code></p><h3 id="创建分支-1"><a href="#创建分支-1" class="headerlink" title="创建分支"></a>创建分支</h3><p>选择<code>Git</code>–&gt;<code>Respoitory</code>–&gt;<code>Branches</code>–&gt;<code>New Branch</code>–&gt;填写分支名称–&gt;<code>ok</code>–&gt;右下角看到分支名称，即代表创建成功，并且已切换到分支。</p><h3 id="切换分支-1"><a href="#切换分支-1" class="headerlink" title="切换分支"></a>切换分支</h3><p>IDEA右下角，切换到master分支，右下角看到分支名称，即代表已切换到分支。</p><h3 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h3><p>IDEA右下角，将xxx分支合并到当前master分支。</p><p>如果代码没有冲突， 分支直接合并成功，分支合并成功以后，代码自动提交，无需手动提交本地库。  </p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><ol><li>点击 Conflicts 框里的 Merge 按钮，进行手动合并代码。  </li><li>手动合并完代码以后，点击右下角的 Apply 按钮  </li><li>代码冲突解决，自动提交本地库  </li></ol><h2 id="IDEA集成GitHub"><a href="#IDEA集成GitHub" class="headerlink" title="IDEA集成GitHub"></a>IDEA集成GitHub</h2><h3 id="设置GitHub账号"><a href="#设置GitHub账号" class="headerlink" title="设置GitHub账号"></a>设置GitHub账号</h3><p><code>File</code>–&gt;<code>Settings</code>–&gt;<code>Version Control</code>–&gt;<code>GitHub</code>–&gt;<code>+</code>–&gt;添加GitHub账号密码</p><p>如果出现连接不上的情况，可以使用token的方式。</p><h4 id="设置token"><a href="#设置token" class="headerlink" title="设置token"></a>设置token</h4><p>打开<code>github</code>–&gt;头像–&gt;<code>Settings</code>–&gt;<code>Developer settings</code>–&gt;<code>Personal access tokens</code>–&gt;<code>Generate new token</code>–&gt;学习环境权限作用域全部勾选–&gt;<code>Generate token</code></p><p>复制 token ，返回IDEA进行登录。</p><h3 id="分享到Github"><a href="#分享到Github" class="headerlink" title="分享到Github"></a>分享到Github</h3><p><code>VCS</code>–&gt;<code>Import into Version Control</code>–&gt;<code>share Project on GitHub</code>–&gt;填写仓库名，点击分享</p><h3 id="push推送本地库到远程库"><a href="#push推送本地库到远程库" class="headerlink" title="push推送本地库到远程库"></a>push推送本地库到远程库</h3><p>右击项目–&gt;<code>Git</code>–&gt;<code>Respository</code>–&gt;<code>push</code>–&gt;在 <code>Push Commits</code>里面可以创建远程链接的别名–&gt;选择别名，将项目 push 到指定的远程仓库中。</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610152425952.png" alt="创建远程链接的别名"></p><blockquote><p>注意：</p><p>push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的。也就是说， 要想 push 成功，一定要保证本地库的版本要比远程库的版本高！ </p><p><font color="red">因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别！如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送 ！</font></p></blockquote><h3 id="pull拉去远程库到本地库"><a href="#pull拉去远程库到本地库" class="headerlink" title="pull拉去远程库到本地库"></a>pull拉去远程库到本地库</h3><p>右击项目–&gt;<code>Git</code>–&gt;<code>Respository</code>–&gt;<code>pull</code>–&gt;选择分支，点击<code>Pull</code></p><blockquote><p>注意：</p><p>pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手动解决冲突的问题。  </p></blockquote><h3 id="clone远程库到本地"><a href="#clone远程库到本地" class="headerlink" title="clone远程库到本地"></a>clone远程库到本地</h3><p><code>VCS</code>–&gt;<code>Git</code>–&gt;<code>Clone</code>–&gt;填写url，点击<code>test</code>，点击<code>clone</code>–&gt;创建一个工程，点击<code>next</code></p><h3 id="国内代码托管中心——gitee"><a href="#国内代码托管中心——gitee" class="headerlink" title="国内代码托管中心——gitee"></a>国内代码托管中心——gitee</h3><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>众所周知， GitHub 服务器在国外， 使用 GitHub 作为项目托管网站，如果网速不好的话，严重影响使用体验，甚至会出现登录不上的情况。针对这个情况，大家也可以使用国内的项目托管网站——Gitee。  </p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>官网：<a href="gitee.com">gitee.com</a></p><h3 id="IDEA集成Gitee"><a href="#IDEA集成Gitee" class="headerlink" title="IDEA集成Gitee"></a>IDEA集成Gitee</h3><h4 id="IDEA安装Gitee插件"><a href="#IDEA安装Gitee插件" class="headerlink" title="IDEA安装Gitee插件"></a>IDEA安装Gitee插件</h4><p>由于IDEA默认不带码云插件，我们要使用Gitee的话，就需要安装Gitee插件。</p><p><code>File</code>–&gt;<code>settings</code>–&gt;<code>plugins</code>–&gt;<code>Marketplace</code>–&gt;搜索<code>gitee</code>–&gt;<code>Install</code>–&gt;<code>Restart IDE</code></p><p><code>File</code>–&gt;<code>Settings</code>–&gt;<code>Version Control</code>–&gt;<code>Gitee</code>–&gt;<code>+</code>–&gt;添加Gitee账号密码</p><h4 id="IDEA连接Gitee"><a href="#IDEA连接Gitee" class="headerlink" title="IDEA连接Gitee"></a>IDEA连接Gitee</h4><p>dea 连接Gitee和连接 GitHub 几乎一样，首先在 Idea 里面创建一个工程，初始化 git 工程，然后将代码添加到暂存区，提交到本地库，这些步骤上面已经讲过，此处不再赘述。  </p><h4 id="本地代码Push到Gitee"><a href="#本地代码Push到Gitee" class="headerlink" title="本地代码Push到Gitee"></a>本地代码Push到Gitee</h4><p>右击项目–&gt;<code>Git</code>–&gt;<code>Respository</code>–&gt;<code>push</code>–&gt;在 <code>Push Commits</code>里面可以创建远程链接的别名，url填入Gitee仓库的链接即可–&gt;选择别名，将项目 push 到指定的远程仓库中。</p><p>只要码云远程库链接定义好以后， 对码云远程库进行 pull 和 clone 的操作和 Github 一<br>致，此处不再赘述。  </p><h3 id="Gitee复制GitHub项目"><a href="#Gitee复制GitHub项目" class="headerlink" title="Gitee复制GitHub项目"></a>Gitee复制GitHub项目</h3><p>Gitee提供了复制GitHub项目的功能，方便我们迁移和下载。</p><p>打开gitee –&gt; 右上角<code>+</code> –&gt; 从GitHub/GitLab导入仓库 –&gt;从GitHub导入 –&gt; 选择要导入的仓库，点击导入即可。</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610194849360.png" alt="从GitHub/GitLab导入仓库"></p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210610194922761.png" alt="选择仓库进行导入"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典排序算法的分析与实现</title>
      <link href="/2021/06/09/jing-dian-pai-xu-suan-fa-de-fen-xi-yu-shi-xian/"/>
      <url>/2021/06/09/jing-dian-pai-xu-suan-fa-de-fen-xi-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="经典排序算法的分析与实现"><a href="#经典排序算法的分析与实现" class="headerlink" title="经典排序算法的分析与实现"></a>经典排序算法的分析与实现</h1><h2 id="1-comparable和comparator"><a href="#1-comparable和comparator" class="headerlink" title="1.comparable和comparator"></a>1.comparable和comparator</h2><blockquote><p>1.Comparable是排序接口；若一个类实现了Comparable接口，就意味着“该类支持排序”。</p><p>（作用在实体类上）<br>2.而Comparator是比较器；我们若需要控制某个类的次序，可以建立一个“该类的比较器”来进行排序。</p><p>（作用在排序类上）</p><p>总结：Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。</p></blockquote><h2 id="2-约定"><a href="#2-约定" class="headerlink" title="2.约定"></a>2.约定</h2><p>待排序的元素需要实现 Java 的 Comparable 接口，该接口有 compareTo() 方法，可以用它来判断两个元素的大小关系。</p><p>使用辅助函数 lessThan() 和 swap() 来进行比较和交换的操作，使得代码的可读性和可移植性更好。</p><p>排序算法的成本模型是比较和交换的次数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对目标数组进行排序     * @param array 目标数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param v T类型的对象     * @param w T类型的对象     * @return 如果v&lt;w，返回true，否则返回false     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">lessThan</span><span class="token punctuation">(</span>T v<span class="token punctuation">,</span> T w<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 比较同一类型的两个示例的大小     * @param v T类型的示例     * @param w T类型的示例     * @return 如果v>w，返回true，否则返回false     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">moreThn</span><span class="token punctuation">(</span>T v<span class="token punctuation">,</span> T w<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 用于交换数组中的两个数     * @param array 目标数组     * @param i 数组下标     * @param j 数组下标     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span>  j<span class="token punctuation">)</span><span class="token punctuation">{</span>        T t <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-选择排序算法"><a href="#3-选择排序算法" class="headerlink" title="3.选择排序算法"></a>3.选择排序算法</h2><p><strong>原理：</strong></p><p>每次从数组中选择最小元素，将它与数组的第i个元素交换位置。</p><p>选择排序需要 ~N^2^/2 次比较和 ~N 次交换，它的运行时间与输入无关，这个特点使得它对一个已经排序的数组也需要这么多的比较和交换操作。</p><p><img src="https://i.imgur.com/fYPsoKv.gif"></p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Selection</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用快速排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lessThan</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-冒泡排序算法"><a href="#4-冒泡排序算法" class="headerlink" title="4.冒泡排序算法"></a>4.冒泡排序算法</h2><p><strong>原理：</strong></p><p>从左到右不断交换相邻的逆序的元素，在经过一轮的循环之后，可以让最大的元素上浮到最右边。</p><p>在一轮循环中，如果没有发生交换，那么说明数组已经是有序的，此时可以直接退出。</p><p><img src="https://i.imgur.com/vkZ5GS7.gif"></p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bubble</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用冒泡排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lessThan</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSorted<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5-插入排序算法"><a href="#5-插入排序算法" class="headerlink" title="5.插入排序算法"></a>5.插入排序算法</h2><p><strong>原理：</strong></p><p>从数组的第i（i&gt;1）个数据开始向前比较，如果比j（j&lt;i）小，交换位置。</p><p><img src="https://i.imgur.com/bncpJ2B.gif"></p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Insertion</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用插入排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lessThan</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-希尔排序算法"><a href="#6-希尔排序算法" class="headerlink" title="6.希尔排序算法"></a>6.希尔排序算法</h2><p><strong>原理：</strong></p><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p><p><img src="https://i.imgur.com/3ymhb30.png"></p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shell</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用希尔排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> gap <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>gap <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> gap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lessThan</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">-</span> gap<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="7-归并排序算法"><a href="#7-归并排序算法" class="headerlink" title="7.归并排序算法"></a>7.归并排序算法</h2><p><strong>原理：</strong></p><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><p><strong>归并部分代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Marge</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 归并算法     * @param array 原数组     * @param low   需要进行归并部分的开始下标     * @param mid   需要进行归并部分的中间下标     * @param high  需要进行归并部分的结束下标     * @param aux   辅助数组     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">marge</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> aux<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//右指针</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左指针</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> low<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将右序列剩余元素添加进原数组</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">></span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将左序列剩余元素添加进原数组</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>aux<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//添加小的元素进入原数组</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//添加小的元素进入原数组</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-1-自顶向上归并排序"><a href="#7-1-自顶向上归并排序" class="headerlink" title="7.1 自顶向上归并排序"></a>7.1 自顶向上归并排序</h3><p><strong>原理：</strong></p><p>自顶向下的排序算法就是把数组元素不断的二分，直到子数组的元素个数为一个，因为这个时候子数组必定是已有序的，然后将两个有序的序列合并成一个新的有序的序列，两个新的有序序列又可以合并成另一个新的有序序列，以此类推，直到合并成一个有序的数组。</p><p><img src="https://i.imgur.com/b5Dgq52.png"></p><p><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218194508761-468169540.png"></p><p><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218194621308-588010220.png"></p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpToDownMarge</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Marge</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用自顶向下归并排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建辅助数组</span>        T<span class="token punctuation">[</span><span class="token punctuation">]</span> auxiliary <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> auxiliary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用递归对数组进行划分     * @param array 任意类型的原数组     * @param low   需要进行划分部分的初始下标     * @param high  需要进行划分部分的结束下标     * @param aux   辅助数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> aux<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">&lt;=</span> low<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> aux<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> aux<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">marge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">,</span> aux<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-2-自底向上归并排序"><a href="#7-2-自底向上归并排序" class="headerlink" title="7.2 自底向上归并排序"></a>7.2 自底向上归并排序</h3><p><strong>原理：</strong></p><p>自底向上的排序是归并排序的一种实现方式，将一个无序的N长数组切个成N个有序子序列，然后再两两合并，然后再将合并后的N/2（或者N/2 + 1）个子序列继续进行两两合并，以此类推得到一个完整的有序数组。下图详细的分解了自底向上的合并算法的实现过程：</p><p><img src="https://i.imgur.com/57XtOjM.jpg"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownToUpMerge</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Merge</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用自底向上归并排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T<span class="token punctuation">[</span><span class="token punctuation">]</span> auxiliary <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//len表示有len个元素归并，例如len=1表示一个一个元素的进行归并</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> len <span class="token operator">+=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//按照len的长度归并，归并后长度翻倍</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> start <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> len<span class="token punctuation">;</span> start <span class="token operator">+=</span> len <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">merge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> start<span class="token punctuation">,</span> start <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>start <span class="token operator">+</span> len <span class="token operator">+</span> len <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> auxiliary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="8-快速排序算法"><a href="#8-快速排序算法" class="headerlink" title="8.快速排序算法"></a>8.快速排序算法</h2><h3 id="8-1-基本算法"><a href="#8-1-基本算法" class="headerlink" title="8.1 基本算法"></a>8.1 基本算法</h3><p><strong>基本思想：</strong></p><ul><li>先从数列中取出一个数作为基准数。</li><li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li><li>再对左右区间重复第二步，直到各区间只有一个数。</li></ul><p><img src="https://i.imgur.com/L1UTzxn.png"></p><ul><li>切分：取 array[low] 作为切分元素，然后从数组的左端向右端扫描知道找到第一个大于等于它的元素，再从数组的右端向左扫描找到第一个小于它的元素，交换这两个元素。不断重复进行这个过程就可以保证左指针 left 的左侧元素都不大于切分元素，右指针 right 的右侧元素都不小于切分元素。当两个指针相遇时，将切分元素 a[low] 和 a[right] 交换位置。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quick</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用快速排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过递归不断交换元素的位置     * @param array 被操作的数组     * @param low   从左边开始执行的元素下标     * @param high  从右边开始执行的元素下标     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">&lt;=</span> low<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取被发生交换的元素的位置        int index = partition(array, low, high);        sort(array, low, index - 1);        sort(array, index + 1, high);    }    </span><span class="token comment" spellcheck="true">/**     * 对原数组进行切分，获取与array[low]进行交换的元素的下标     * @param array 操作数组     * @param low   从左边开始执行的元素下标     * @param high  从右边开始执行的元素下标     * @return 返回与array[low]进行交换的元素的下标     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//左指针        int left = low + 1;        //右指针        int right = high;        T flag = array[low];        while (true){            while (lessThan(array[left], flag) &amp;&amp; left != high){                left++;            }            while (lessThan(flag, array[right]) &amp;&amp; right != low){                right--;            }            if (left >= right){                break;            }            swap(array, left, right);        }        swap(array, low, right);        return right;    }}</span></code></pre><h3 id="8-2-性能分析"><a href="#8-2-性能分析" class="headerlink" title="8.2 性能分析"></a>8.2 性能分析</h3><p>快速排序是原地排序，不需要辅助数组，但是递归调用需要辅助栈。</p><p>快速排序最好的情况下是每次都正好将数组对半分，这样递归调用次数才是最少的。这种情况下比较次数为 CN=2CN/2+N，复杂度为 O(NlogN)。</p><p>最坏的情况下，第一次从最小的元素切分，第二次从第二小的元素切分，如此这般。因此最坏的情况下需要比较 N2/2。为了防止数组最开始就是有序的，在进行快速排序时需要随机打乱数组。</p><h3 id="8-3-算法改进"><a href="#8-3-算法改进" class="headerlink" title="8.3 算法改进"></a>8.3 算法改进</h3><h4 id="8-3-1-切换到插入排序"><a href="#8-3-1-切换到插入排序" class="headerlink" title="8.3.1 切换到插入排序"></a>8.3.1 切换到插入排序</h4><p>在面对小数组时，使用快速排序会浪费更多的时间、空间，可以学习jdk1.8的排序算法，当数组长度小于某个值时，使用插入排序算法</p><h4 id="8-3-2-三数取中算法"><a href="#8-3-2-三数取中算法" class="headerlink" title="8.3.2 三数取中算法"></a>8.3.2 三数取中算法</h4><p>在快排的过程中，每一次我们要取一个元素作为枢纽值，以这个数字来将序列划分为两部分。在此我们采用三数取中法，也就是取左端、中间、右端三个数，然后进行排序，将中间数作为枢纽值。</p><p><strong>基本原理：</strong></p><p><img src="https://i.imgur.com/KeNroIf.png"></p><p><img src="https://i.imgur.com/xnQscCO.png"></p><p><img src="https://i.imgur.com/yLQ3aMX.png"></p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiddleOfThree</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用三数取中快速排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用递归对目标数组 array 进行排序     * @param array 目标数组     * @param low   左指针     * @param high  右指针     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dealPivot</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用下列判断去除一下已经排好序的情况，节省运行时间        if (high &lt;= low + 1){            return;        }        int pivot = high - 1;        int left = low + 1;        int right = pivot - 1;        while (true){            while (lessThan(array[left], array[pivot]) &amp;&amp; left &lt; high){                left++;            }            while (right > low &amp;&amp; moreThen(array[right], array[pivot])){                right--;            }            if (right > left){                swap(array, left, right);            } else {                break;            }        }        swap(array, left, pivot);        sort(array, low, left - 1);        sort(array, left + 1, high);    }    </span><span class="token comment" spellcheck="true">/**     * 找到枢纽值，并对左端值、枢纽值、右端值进行排序，并将枢纽值放到右端值左侧     * 通过三次判断就保证了三个值的升序排列     * @param array 目标数组     * @param low   左端指针     * @param high  右端指针     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dealPivot</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对左端值、枢纽值、右端值三个数进行排序        if (lessThan(array[mid], array[low])){            swap(array, low, mid);        }        if (lessThan(array[high], array[mid])){            swap(array, mid, high);        }        if (lessThan(array[mid], array[low])){            swap(array, low, mid);        }        //将枢纽值放到右端值左侧        swap(array, mid, high - 1);    }}</span></code></pre><h4 id="8-3-3-三向切分算法"><a href="#8-3-3-三向切分算法" class="headerlink" title="8.3.3 三向切分算法"></a>8.3.3 三向切分算法</h4><p>对于有大量重复元素的数组，可以将数组切分为三部分，分别对应小于、等于和大于切分元素。</p><p>三向切分快速排序对于有大量重复元素的随机数组可以在线性时间内完成排序。</p><p><strong>基本原理：</strong></p><p>对于每次切分：从数组的左边到右边遍历一次，维护三个指针，其中lt指针使得元素（arr[0]-arr[lt-1]）的值均小于切分元素；gt指针使得元素（arr[gt+1]-arr[N-1]）的值均大于切分元素；index指针使得元素（arr[lt]-arr[index-1]）的值均等于切分元素，（arr[index]-arr[gt]）的元素还没被扫描，切分算法执行到index&gt;gt为止。每次切分之后，位于gt指针和lt指针之间的元素的位置都已经被排定，不需要再去处理了。之后将（lo,lt-1）,（gt+1,hi）分别作为处理左子数组和右子数组的递归函数的参数传入，递归结束，整个算法也就结束。</p><p><img src="https://i.imgur.com/6tWXYdr.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreeWay</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 实现Sort的sort接口     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归使用三向切分快速排序算法进行排序     * @param array 目标数组     * @param low   左指针     * @param high  右指针     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">&lt;=</span> low<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//lt:less than  gt:greater than        int lt = low;        int index = low + 1;        int gt = high;        T temp = array[low];        while (index &lt;= gt){            int cmp = array[index].compareTo(temp);            if (cmp &lt; 0){                swap(array, lt++, index++);            } else if (cmp > 0){                swap(array, index, gt--);            } else {                index++;            }        }        sort(array, low, lt - 1);        sort(array, gt + 1, high);    }}</span></code></pre><h4 id="8-4-基于切分的快速选择算法"><a href="#8-4-基于切分的快速选择算法" class="headerlink" title="8.4 基于切分的快速选择算法"></a>8.4 基于切分的快速选择算法</h4><p>快速排序的 partition() 方法，会返回一个整数 j 使得 a[l..j-1] 小于等于 a[j]，且 a[j+1..h] 大于等于 a[j]，此时 a[j] 就是数组的第 j 大元素。</p><p>可以利用这个特性找出数组的第 k 个元素。</p><p>该算法是线性级别的，假设每次能将数组二分，那么比较的总次数为 (N+N/2+N/4+..)，直到找到第 k 个元素，这个和显然小于 2N。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 搜索数组中第k个小的元素     * @param array 目标数组     * @param k     第k个元素     * @return      第k个元素     */</span>    <span class="token keyword">public</span> T <span class="token function">select</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> high <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">></span> low<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> array<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                high <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                low <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="9-堆排序"><a href="#9-堆排序" class="headerlink" title="9.堆排序"></a>9.堆排序</h2><p>堆中某个节点的值总是大于等于或小于等于其子节点的值，并且堆是一颗完全二叉树。</p><p>堆可以用数组来表示，这是因为堆是完全二叉树，而完全二叉树很容易就存储在数组中。位置 k 的节点的父节点位置为 k/2，而它的两个子节点的位置分别为 2k 和 2k+1。这里不使用数组索引为 0 的位置，是为了更清晰地描述节点的位置关系。</p><p><strong>基本原理：</strong></p><ol><li>构建堆：根据初始数组去构造初始堆（构建一个完全二叉树，保证所有的父结点都比它的孩子结点数值大）。</li><li>每次交换第一个和最后一个元素，输出最后一个元素（最大值），然后把剩下元素重新调整为大根堆。 </li><li>当输出完最后一个元素后，这个数组已经是按照从小到大的顺序排列了。</li></ol><p>具体可以查看博客：<a href="https://www.cnblogs.com/chengxiao/p/6129630.html">图解排序算法(三)之堆排序</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">extends</span> <span class="token class-name">Sort</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用堆排序算法进行排序     * @param array 目标数组     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构建大顶堆        int len = array.length;        for (int i = len / 2 - 1; i >= 0; i--) {            //从第一个非叶子结点从下至上，从右至左调整结构            adjust(array, i, len);        }        //调整堆结构+交换堆顶元素与末尾元素        for (int i = len - 1; i > 0; i--) {            swap(array, 0, i);            adjust(array, 0, i);        }    }    </span><span class="token comment" spellcheck="true">/**     * 对第i个节点以及其子节点进行调整调整     * @param array 目标数组     * @param i     第i个节点     * @param len   数组长度     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前值        T temp = array[i];        //从i节点的左子节点开始，即2i+1处        for (int j = i * 2 + 1; j &lt; len; j = j * 2 + 1) {            //如果存在右子节点，并且左子节点小于右子节点，j指向右子节点            if (j + 1 &lt; len &amp;&amp; lessThan(array[j], array[j + 1])){                j++;            }            //如果子节点大于父节点，将子节点值赋给父节点（不进行交换）            if (lessThan(temp, array[j])){                array[i] = array[j];                i = j;            } else {                break;            }        }        //将temp的值放到最终的位置        array[i] = temp;    }}</span></code></pre><p><strong>分析：</strong></p><ul><li><p>一个堆的高度为 logN，因此在堆中插入元素和删除最大元素的复杂度都为 logN。</p></li><li><p>对于堆排序，由于要对 N 个节点进行下沉操作，因此复杂度为 NlogN。</p></li><li><p>堆排序是一种原地排序，没有利用额外的空间。</p></li><li><p>现代操作系统很少使用堆排序，因为它无法利用局部性原理进行缓存，也就是数组元素很少和相邻的元素进行比较和交换。</p></li></ul><h2 id="10-上述排序算法的比较"><a href="#10-上述排序算法的比较" class="headerlink" title="10.上述排序算法的比较"></a>10.上述排序算法的比较</h2><table><thead><tr><th>算法</th><th>稳定性</th><th>时间复杂度</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td><a href="#3.选择排序算法">选择排序</a></td><td>×</td><td>N^2^</td><td>1</td><td></td></tr><tr><td><a href="#4.冒泡排序算法">冒泡排序</a></td><td>√</td><td>N^2^</td><td>1</td><td></td></tr><tr><td><a href="#5.插入排序算法">插入排序</a></td><td>√</td><td>N~N^2^</td><td>1</td><td>时间复杂度和初始顺序有关</td></tr><tr><td><a href="#6.希尔排序算法">希尔排序</a></td><td>×</td><td>N的若干倍乘于递增序列的长度</td><td>1</td><td>改进版插入排序</td></tr><tr><td><a href="#7.归并排序算法">归并排序</a></td><td>√</td><td>NlogN</td><td>N</td><td></td></tr><tr><td><a href="#8.快速排序算法">快速排序</a></td><td>×</td><td>NlogN</td><td>logN</td><td></td></tr><tr><td><a href="#8.3.2 三数取中算法">三数取中快速排序</a></td><td>×</td><td>NlogN</td><td>logN</td><td></td></tr><tr><td><a href="#8.3.3 三向切分算法">三向切分快速排序</a></td><td>×</td><td>N ~ NlogN</td><td>logN</td><td>适用于有大量重复数据</td></tr><tr><td><a href="#9.堆排序">堆排序</a></td><td>×</td><td>NlogN</td><td>1</td><td>无法利用局部性原理</td></tr></tbody></table><ul><li>排序算法的稳定性：俗地讲就是能保证排序前两个相等的数据其在序列中的先后位置顺序与排序后它们两个先后位置顺序相同。即：如，如果A i == A j，Ai 原来在 Aj 位置前，排序后 Ai 仍然是在 Aj 位置前。</li></ul><h2 id="11-JDK自带的DualPivotQuickSort"><a href="#11-JDK自带的DualPivotQuickSort" class="headerlink" title="11.JDK自带的DualPivotQuickSort"></a>11.JDK自带的DualPivotQuickSort</h2><p>jdk版本：1.8.0_281</p><p>DualPivotQuickSort 类实现了由 Vladimir Yaroslavskiy、Jon Bentley和Josh Bloch的Dual-Pivot Quicksort算法。该算法在许多数据集上提供了O(nlog(n))的性能，这些数据集会导致其他quicksort的性能下降到二次方，并且通常比传统的（单枢轴）Quicksort实现更快。所有暴露的方法都是包私有的，设计为在执行任何必要的数组边界检查并将参数扩展为所需形式后，从公共方法（在类Arrays中）调用。</p><p>整个算法的思路是：首先检查数组的长度，比一个阈值小的时候直接使用双轴快排。其它情况下，先检查数组中数据的顺序连续性。把数组中连续升序或者连续降序的信息记录下来，顺便把连续降序的部分倒置。这样数据就被切割成一段段连续升序的数列。</p><p>以下是int类型排序的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DualPivotQuicksort</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 保护这个类不被实例化     */</span>    <span class="token keyword">private</span> <span class="token function">DualPivotQuicksort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 待归并的序列的最大数量     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_RUN_COUNT <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 待归并的序列的最大长度     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_RUN_LENGTH <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果参与排序的数组长度小于这个值，优先使用快速排序而不是归并排序     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QUICKSORT_THRESHOLD <span class="token operator">=</span> <span class="token number">286</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果参与排序的数组长度小于这个值，优先使用插入排序而不是快速排序     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INSERTION_SORT_THRESHOLD <span class="token operator">=</span> <span class="token number">47</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果要排序的字节数组的长度大于这个常数，则优先使用计数排序，而不是插入排序。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNTING_SORT_THRESHOLD_FOR_BYTE <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果要排序的短数组或char数组的长度大于这个常数，则优先使用计数排序，而不是Quicksort。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR <span class="token operator">=</span> <span class="token number">3200</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/**     * 如果可能的话，使用给定的工作空间数组片对数组的指定范围进行排序，以便合并。     *     * @param a         目标数组     * @param left the  第一个元素的索引，包括在内，要进行排序。     * @param right the 要排序的数组的最后一个元素的索引，包括在内。     * @param work         工作区阵列     * @param workBase  工作阵列中可用空间的来源     * @param workLen   工作阵列的可用长度     */</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span>                     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> work<span class="token punctuation">,</span> <span class="token keyword">int</span> workBase<span class="token punctuation">,</span> <span class="token keyword">int</span> workLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在小数组上使用Quicksort        if (right - left &lt; QUICKSORT_THRESHOLD) {            sort(a, left, right, true);            return;        }        </span><span class="token comment" spellcheck="true">/*         * Index run[i] is the start of i-th run         * (ascending or descending sequence).         */</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>MAX_RUN_COUNT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> run<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查数组是否接近排序        for (int k = left; k &lt; right; run[count] = k) {            if (a[k] &lt; a[k + 1]) { // 升序                while (++k &lt;= right &amp;&amp; a[k - 1] &lt;= a[k]);            } else if (a[k] > a[k + 1]) { // 降序                while (++k &lt;= right &amp;&amp; a[k - 1] >= a[k]);                for (int lo = run[count] - 1, hi = k; ++lo &lt; --hi; ) {                    int t = a[lo]; a[lo] = a[hi]; a[hi] = t;                }            } else { // equal                for (int m = MAX_RUN_LENGTH; ++k &lt;= right &amp;&amp; a[k - 1] == a[k]; ) {                    if (--m == 0) {                        sort(a, left, right, true);                        return;                    }                }            }            </span><span class="token comment" spellcheck="true">/*             * 数组结构不高，用Quicksort代替合并排序。             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>count <span class="token operator">==</span> MAX_RUN_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 检查特殊情况        // 实施说明：变量 "right "增加1。        if (run[count] == right++) { // The last run contains one element            run[++count] = right;        } else if (count == 1) { // The array is already sorted            return;        }        // 确定合并的交替基础        byte odd = 0;        for (int n = 1; (n &lt;&lt;= 1) &lt; count; odd ^= 1);        // 使用或创建临时数组b进行合并        int[] b;                 // temp array; alternates with a        int ao, bo;              // array offsets from 'left'        int blen = right - left; // space needed for b        if (work == null || workLen &lt; blen || workBase + blen > work.length) {            work = new int[blen];            workBase = 0;        }        if (odd == 0) {            System.arraycopy(a, left, work, workBase, blen);            b = a;            bo = 0;            a = work;            ao = workBase - left;        } else {            b = work;            ao = 0;            bo = workBase - left;        }        // Merging        for (int last; count > 1; count = last) {            for (int k = (last = 0) + 2; k &lt;= count; k += 2) {                int hi = run[k], mi = run[k - 1];                for (int i = run[k - 2], p = i, q = mi; i &lt; hi; ++i) {                    if (q >= hi || p &lt; mi &amp;&amp; a[p + ao] &lt;= a[q + ao]) {                        b[i + bo] = a[p++ + ao];                    } else {                        b[i + bo] = a[q++ + ao];                    }                }                run[++last] = hi;            }            if ((count &amp; 1) != 0) {                for (int i = right, lo = run[count - 1]; --i >= lo;                    b[i + bo] = a[i + ao]                );                run[++last] = right;            }            int[] t = a; a = b; b = t;            int o = ao; ao = bo; bo = o;        }    }            </span><span class="token comment" spellcheck="true">/**     * 使用双轴快速排序给指定数组的指定范围排序     *     * @param          目标数组     * @param left     范围内最左边的元素的位置(包括该元素)     * @param right    范围内最右边的元素的位置(包括该元素)     * @param leftmost 指定的范围是否在数组的最左边     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">boolean</span> leftmost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//小数组使用插入排序        if (length &lt; INSERTION_SORT_THRESHOLD) {            if (leftmost) {                </span><span class="token comment" spellcheck="true">/*                 * 传统的（没有哨兵）插入排序，针对服务器虚拟机进行了优化，在最左边的情况下使用。                 */</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> ai <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">--</span> <span class="token operator">==</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ai<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * 跳过开头的升序。                 */</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                 * 来自相邻部分的每个元素都扮演着哨兵的角色，因此，这使得我们可以避免                 * 每次迭代的左范围检查。此外，我们使用了更优化的算法，即所谓的成对插入                 * 排序，它比传统的插入排序的实现更快（在Quicksort的上下文中）。                 */</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token operator">++</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> k <span class="token operator">=</span> <span class="token operator">++</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> a1 <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> a2 <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">&lt;</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a2 <span class="token operator">=</span> a1<span class="token punctuation">;</span> a1 <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//先把两个数字中较大的那个移动到合适的位置                    while (a1 &lt; a[--k]) {                        //这里每次需要向左移动两个元素                        a[k + 2] = a[k];                    }                    a[++k + 1] = a1;                  //再把两个数字中较小的那个移动到合适的位置                    while (a2 &lt; a[--k]) {                        //这里每次需要向左移动一个元素                        a[k + 1] = a[k];                    }                    a[k + 1] = a2;                }                int last = a[right];                while (last &lt; a[--right]) {                    a[right + 1] = a[right];                }                a[right + 1] = last;            }            return;        }        // length / 7的一种低复杂度实现        int seventh = (length >> 3) + (length >> 6) + 1;        </span><span class="token comment" spellcheck="true">/*         * 在范围内的中心元素周围（并包括中心元素）排序五个均匀间隔的元素。         * 这些元素将用于下文所述的枢轴选择。这些元素间距的选择是根据经验确定的，         * 对各种输入都能很好地发挥作用。         */</span>        <span class="token comment" spellcheck="true">// 中间值        int e3 = (left + right) >>> 1;         int e2 = e3 - seventh;        int e1 = e2 - seventh;        int e4 = e3 + seventh;        int e5 = e4 + seventh;        // 对这些元素使用插入排序        if (a[e2] &lt; a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }        if (a[e3] &lt; a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t;            if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }        }        if (a[e4] &lt; a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t;            if (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t;                if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }            }        }        if (a[e5] &lt; a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t;            if (t &lt; a[e3]) { a[e4] = a[e3]; a[e3] = t;                if (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t;                    if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }                }            }        }        //指针        int less  = left;  // 中间区域首个元素的下标        int great = right; // 右边区域首个元素的下标        if (a[e1] != a[e2] &amp;&amp; a[e2] != a[e3] &amp;&amp; a[e3] != a[e4] &amp;&amp; a[e4] != a[e5]) {            </span><span class="token comment" spellcheck="true">/*             * 使用五个排序元素中的第二个和第四个作为支点。             * 这些值是数组的第一和第二特码的廉价近似值。             * 请注意，pivot1 &lt;= pivot2。             */</span>            <span class="token keyword">int</span> pivot1 <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pivot2 <span class="token operator">=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * 要排序的第一个和最后一个元素被移动到以前被枢轴占用的位置。             * 分割完成后，将枢轴换回其最终位置，并将其排除在后续排序之外。             */</span>            a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * 跳过一些队首的小于pivot1的值，跳过队尾的大于pivot2的值             */</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>less<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>great<span class="token punctuation">]</span> <span class="token operator">></span> pivot2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * Partitioning:             *             *   left part           center part                   right part             * +--------------------------------------------------------------+             * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  > pivot2  |             * +--------------------------------------------------------------+             *               ^                          ^       ^             *               |                          |       |             *              less                        k     great             *             * Invariants:             *             *              all in (left, less)   &lt; pivot1             *    pivot1 &lt;= all in [less, k)     &lt;= pivot2             *              all in (great, right) > pivot2             *             * Pointer k is the first index of ?-part.             */</span>            outer<span class="token operator">:</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将a[k]移动到左部区域                if (ak &lt; pivot1) {                     a[k] = a[less];                    </span><span class="token comment" spellcheck="true">/*                     * Here and below we use "a[i] = b; i++;" instead                     * of "a[i++] = b;" due to performance issue.                     */</span>                    a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">++</span>less<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 移动 a[k]到右侧区域                } else if (ak > pivot2) {                     while (a[great] > pivot2) {                        if (great-- == k) {                            break outer;                        }                    }                    // a[great] &lt;= pivot2                    if (a[great] &lt; pivot1) {                         a[k] = a[less];                        a[less] = a[great];                        ++less;                    } else { // pivot1 &lt;= a[great] &lt;= pivot2                        a[k] = a[great];                    }                    </span><span class="token comment" spellcheck="true">/*                     * Here and below we use "a[i] = b; i--;" instead                     * of "a[i--] = b;" due to performance issue.                     */</span>                    a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 交换他们最后的下标            a[left]  = a[less  - 1]; a[less  - 1] = pivot1;            a[right] = a[great + 1]; a[great + 1] = pivot2;            // 递归地对左右两部分进行排序，排除已知的支点。            sort(a, left, less - 2, leftmost);            sort(a, great + 2, right, false);            </span><span class="token comment" spellcheck="true">/*             * If center part is too large (comprises > 4/7 of the array),             * swap internal pivot values to ends.             * 如果中心区域太大，超过数组长度的 4/7。就先进行预处理，再参与递归排序。             * 预处理的方法是把等于pivot1的元素统一放到左边，等于pivot2的元素统一             * 放到右边,最终产生一个不包含pivot1和pivot2的数列，再拿去参与快排中的递归。             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>less <span class="token operator">&lt;</span> e1 <span class="token operator">&amp;&amp;</span> e5 <span class="token operator">&lt;</span> great<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * 跳过等于枢轴值的元素。                 */</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">==</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">++</span>less<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">==</span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/*                 * Partitioning:                 *                 *   left part         center part                  right part                 * +----------------------------------------------------------+                 * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |                 * +----------------------------------------------------------+                 *              ^                        ^       ^                 *              |                        |       |                 *             less                      k     great                 *                 * Invariants:                 *                 *              all in (*,  less) == pivot1                 *     pivot1 &lt; all in [less,  k)  &lt; pivot2                 *              all in (great, *) == pivot2                 *                 * Pointer k is the first index of ?-part.                 */</span>                outer<span class="token operator">:</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">==</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to left part                        a[k] = a[less];                        a[less] = ak;                        ++less;                    } else if (ak == pivot2) { // Move a[k] to right part                        while (a[great] == pivot2) {                            if (great-- == k) {                                break outer;                            }                        }                        if (a[great] == pivot1) { // a[great] &lt; pivot2                            a[k] = a[less];                            </span><span class="token comment" spellcheck="true">/*                             * 尽管a[great]等于pivot1，但如果a[great]和                             * pivot1是不同符号的浮点零点，那么a[less]=pivot1                             * 的赋值可能是错误的。因此在浮点数和双数排序方法中，                             * 我们必须使用更准确的赋值a[less] = a[great]。                             */</span>                            a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> pivot1<span class="token punctuation">;</span>                            <span class="token operator">++</span>less<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// pivot1 &lt; a[great] &lt; pivot2                            a[k] = a[great];                        }                        a[great] = ak;                        --great;                    }                }            }            // 中心部分递归排序            sort(a, less, great, false);        } else { // 用一个枢轴进行分区            </span><span class="token comment" spellcheck="true">/*             * 使用五个排序元素中的第三个作为中枢。            * 这个值是中位数的廉价近似值。             */</span>            <span class="token keyword">int</span> pivot <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * Partitioning degenerates to the traditional 3-way             * (or "Dutch National Flag") schema:             *             *   left part    center part              right part             * +-------------------------------------------------+             * |  &lt; pivot  |   == pivot   |     ?    |  > pivot  |             * +-------------------------------------------------+             *              ^              ^        ^             *              |              |        |             *             less            k      great             *             * Invariants:             *             *   all in (left, less)   &lt; pivot             *   all in [less, k)     == pivot             *   all in (great, right) > pivot             *             * Pointer k is the first index of ?-part.             */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to left part                    a[k] = a[less];                    a[less] = ak;                    ++less;                } else { // a[k] > pivot - Move a[k] to right part                    while (a[great] > pivot) {                        --great;                    }                    if (a[great] &lt; pivot) { // a[great] &lt;= pivot                        a[k] = a[less];                        a[less] = a[great];                        ++less;                    } else { // a[great] == pivot                        </span><span class="token comment" spellcheck="true">/*                         * 尽管a[great]等于pivot，但如果a[great]和pivot是不同符号                         * 的浮点零点，那么a[k]=pivot的赋值可能是错误的。因此在浮点数                         * 和双数排序方法中，我们必须使用更准确的赋值a[k] = a[great]。                         */</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*             * 左右部分递归排序。从中心部分开始的所有元素都是相等的，因此，已经进行了排序。             */</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> leftmost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> great <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="学习参考："><a href="#学习参考：" class="headerlink" title="学习参考："></a>学习参考：</h2><ol><li><a href="https://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.html#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">算法-排序</a></li><li><a href="https://www.cnblogs.com/chengxiao/p/6104371.html">图解排序算法(二)之希尔排序</a></li><li><a href="https://www.cnblogs.com/chengxiao/p/6194356.html">图解排序算法(四)之归并排序</a></li><li><a href="https://www.cnblogs.com/ningvsban/p/3789479.html">自底向上的归并排序</a></li><li><a href="https://www.cnblogs.com/chengxiao/p/6262208.html">图解排序算法(五)之快速排序——三数取中法</a></li><li><a href="https://www.cnblogs.com/chengxiao/p/6129630.html">图解排序算法(三)之堆排序</a></li><li><a href="https://blog.csdn.net/weixin_41552752/article/details/90410749?spm=1001.2014.3001.5501">常用算法稳定性分析</a></li><li><a href="https://www.cnblogs.com/dion-90/articles/8547688.html">常用排序算法稳定性、时间复杂度分析</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sort </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化</title>
      <link href="/2021/06/09/bo-ke-you-hua/"/>
      <url>/2021/06/09/bo-ke-you-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考<a href="https://fenghen0918.github.io/2020/06/18/hexo/hexo-github-da-jian-matery-bo-ke-er-zhu-ti-pei-zhi-pian/#toc-heading-17">Hexo+github搭建matery博客二（主题配置篇）</a></p></blockquote><h2 id="更改主题的默认配置"><a href="#更改主题的默认配置" class="headerlink" title="更改主题的默认配置"></a>更改主题的默认配置</h2><h3 id="增加红心"><a href="#增加红心" class="headerlink" title="增加红心"></a>增加红心</h3><p>打开<code>themes\matery\layout\_partial/header.ejs</code>文件，增加：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/HCLonely/images@master/others/heartbeat.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在需要红心的地方添加以下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heartbeat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fas fa-heartbeat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>打开<code>themes\matery\layout\_partial/footer.ejs</code>文件，修改成自己想要的样式：</p><pre class=" language-ejs"><code class="language-ejs">Copyright&nbsp;&copy;<% if (theme.time.year !== new Date().getFullYear()) { %><span id="year"><%- theme.time.year %>-<%- new Date().getFullYear() %></span><% } else { %><span id="year"><%- theme.time.year %></span><% } %><span id="year"><%- theme.time.year %></span><i id="heartbeat" class="fa fas fa-heartbeat"></i>&nbsp;<a href="<%- url_for('/about') %>" target="_blank"><%- config.title %></a><br>欢迎访问我的博客！<br></code></pre><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609181455329.png" alt="页脚效果图"></p><h3 id="修改打赏二维码"><a href="#修改打赏二维码" class="headerlink" title="修改打赏二维码"></a>修改打赏二维码</h3><p>在主题文件的<code>source/medias/reward</code>文件中，替换成自己的支付宝和微信二维码即可。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>打开主题的<code>_config.yml</code>文件，找到<code>socialLink</code>，按自己的意愿修改代码：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 首页 banner 中的第二行个人信息配置，留空即不启用</span><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//github.com/sehowyoung  <span class="token key atrule">email</span><span class="token punctuation">:</span> howyoung525@foxmail.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://twitter.com/xxx</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">846614051</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.zhihu.com/xxx</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># true、false</span></code></pre><h3 id="鼠标点击增加特效"><a href="#鼠标点击增加特效" class="headerlink" title="鼠标点击增加特效"></a>鼠标点击增加特效</h3><h4 id="增加文字特效"><a href="#增加文字特效" class="headerlink" title="增加文字特效"></a>增加文字特效</h4><p>在<code>themes/matery/layout/layout.ejs</code>中，在最后增加代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span>                              <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>                y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>            $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>                <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>                <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>                <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>                <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#FF0000"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>            $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>                <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>                       <span class="token number">3000</span><span class="token punctuation">,</span>                       <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'delay()'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="增加爱心特效"><a href="#增加爱心特效" class="headerlink" title="增加爱心特效"></a>增加爱心特效</h4><p>在主题的<code>_config.yml</code>文件中，将<code>clicklove.enable</code>设为<code>true</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">clicklove</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609184055104.png" alt="特效示例"></p><h3 id="动态背景科技线条"><a href="#动态背景科技线条" class="headerlink" title="动态背景科技线条"></a>动态背景科技线条</h3><p>在<code>themes/matery/layout/layout.ejs</code>文件中添加如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> color<span class="token operator">=</span><span class="token string">"122 103 238"</span> opacity<span class="token operator">=</span><span class="token string">'0.7'</span> zIndex<span class="token operator">=</span><span class="token string">"-2"</span> count<span class="token operator">=</span><span class="token string">"200"</span>src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609184730213.png" alt="科技线特效"></p><h3 id="页面获取标题"><a href="#页面获取标题" class="headerlink" title="页面获取标题"></a>页面获取标题</h3><p>让每个页面有不同的标题</p><p>修改<code>themes\matery\layout\_partial</code>中的<code>bg-cover-content.ejs</code>文件，将第四行的div标签换为：</p><pre class=" language-ejs"><code class="language-ejs"><div class="title center-align">     <% if (is_home() && config.subtitle && config.subtitle.length > 0) { %>        <%= config.subtitle %>     <% } else { %>        <%= page.title %>     <% } %></div></code></pre><p><font color="red">这个有一点bug，归档页面标题无法显示，解决办法目前还没有。</font></p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609190045015.png" alt="效果图" style="zoom: 50%;"><h3 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a>打字机效果</h3><p>在主题配置文件中，按自己的心意进行配置subtitle</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 打字效果副标题.</span><span class="token comment" spellcheck="true"># 如果有符号 ‘ ，请在 ’ 前面加上 \</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否循环</span>  <span class="token key atrule">showCursor</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否显示光标</span>  <span class="token key atrule">startDelay</span><span class="token punctuation">:</span> <span class="token number">300 </span><span class="token comment" spellcheck="true"># 开始延迟</span>  <span class="token key atrule">typeSpeed</span><span class="token punctuation">:</span> <span class="token number">130 </span><span class="token comment" spellcheck="true"># 打字速度</span>  <span class="token key atrule">backSpeed</span><span class="token punctuation">:</span> <span class="token number">70 </span><span class="token comment" spellcheck="true"># 删除速度</span>  <span class="token key atrule">sub1</span><span class="token punctuation">:</span> 从来没有真正的绝境<span class="token punctuation">,</span> 只有心灵的迷途  <span class="token key atrule">sub2</span><span class="token punctuation">:</span> 即使爬到最高的山上，一次也只能脚踏实地地迈一步</code></pre><p><img src="https://gitee.com/sehowyoung/images/raw/master/%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C%E5%9B%BE.gif" alt="打字机效果图"></p><h2 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h2><h3 id="gulp代码压缩"><a href="#gulp代码压缩" class="headerlink" title="gulp代码压缩"></a>gulp代码压缩</h3><blockquote><p>hexo生成的html、css、js等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的“压缩”，减小一点资源文件的大小也是对访问速度有那么一点提升的。</p></blockquote><p>在站点目录执行以下命令，安装插件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局安装gulp模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp -g<span class="token comment" spellcheck="true"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span><span class="token function">npm</span> <span class="token function">install</span> gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save<span class="token comment" spellcheck="true"># 额外的功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</code></pre><p>在Hexo根目录新建文件 gulpfile.js，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。（注意：文件名不能错，一定为gulpfile.js，否则会出错！）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css压缩组件</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js压缩组件</span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html压缩组件</span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html清理组件</span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片压缩组件</span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件更改校验组件</span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//任务 帮助调用组件</span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//容错组件（发生错误不跳出任务，并报出错误内容）</span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否调试显示 编译通过的文件</span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> hexo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexo</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化一个hexo对象</span><span class="token comment" spellcheck="true">// 清除public文件夹</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"public/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><span class="token comment" spellcheck="true">// 创建静态页面 （等同 hexo generate）</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动Hexo服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo        <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的js文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressJs"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.js"</span><span class="token punctuation">,</span> <span class="token string">"!./public/libs/**"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>排除的js        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress JS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>            <span class="token function">gulpBabel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>es2015Preset<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> es5检查机制            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span><span class="token function">调用压缩组件方法uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>对合并的文件进行压缩        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>输出到目标目录<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> 压缩<span class="token keyword">public</span>目录下的css文件gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>        rebase<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span>advanced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">true</span> <span class="token punctuation">[</span>是否开启高级优化（合并选择器等）<span class="token punctuation">]</span>        compatibility<span class="token punctuation">:</span> <span class="token string">"ie7"</span> <span class="token operator">/</span><span class="token operator">/</span>保留ie7及以下兼容写法 类型：String 默认：<span class="token string">''</span>or<span class="token string">'*'</span> <span class="token punctuation">[</span>启用兼容模式； <span class="token string">'ie7'</span>：IE7兼容模式，<span class="token string">'ie8'</span>：IE8兼容模式，<span class="token string">'*'</span>：IE9<span class="token operator">+</span>兼容模式<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepBreaks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">false</span> <span class="token punctuation">[</span>是否保留换行<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepSpecialComments<span class="token punctuation">:</span> <span class="token string">'*'</span> <span class="token operator">/</span><span class="token operator">/</span>保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.css"</span><span class="token punctuation">,</span> <span class="token string">"!./public/**/*.min.css"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//排除的css</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress CSS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleancss</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的html文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> cleanOptions <span class="token operator">=</span> <span class="token punctuation">{</span>        protect<span class="token punctuation">:</span> <span class="token regex">/&lt;\!--%fooTemplate\b.*?%-->/g</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//忽略处理</span>        unprotect<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">&lt;</span>script <span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span>\btype<span class="token operator">=</span><span class="token string">"text\/x-handlebars-template"</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">/</span>gi <span class="token comment" spellcheck="true">//特殊处理</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> minOption <span class="token operator">=</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩HTML</span>        collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//省略布尔属性的值 &lt;input checked="true"/> ==> &lt;input /></span>        removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除所有空格作属性值 &lt;input id="" /> ==> &lt;input /></span>        removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;script>的type="text/javascript"</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;style>和&lt;link>的type="text/css"</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//清除HTML注释</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面JS</span>        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面CSS</span>        minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//替换页面URL</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/**/*.html"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress HTML:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span>cleanOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span>minOption<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public/medias 目录内图片</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>        optimizationLevel<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Number 默认：3 取值范围：0-7（优化等级）</span>        progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 无损压缩jpg图片</span>        interlaced<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>        multipass<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/medias/**/*.*"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public/medias"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress Images:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"build"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        <span class="token string">"compressHtml"</span><span class="token punctuation">,</span>        <span class="token string">"compressCss"</span><span class="token punctuation">,</span>        <span class="token string">"compressJs"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认任务</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"default"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token string">"compressJs"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></code></pre><blockquote><p>注意：这里我去掉了图片的压缩，如果想要加上可以在第154行加上 “compressImage”, 和第165行的加上”compressImage” 即可</p></blockquote><p>使用（两种方式）：</p><ul><li>直接在Hexo根目录执行 gulp，这个命令相当于 hexo cl&amp;&amp;hexo g 并且再把代码压缩，再hexo s进行部署即可</li><li>在Hexo根目录执行 gulp build ，这个命令与第1种相比是：在最后又加了个 hexo d ，等于说生成、压缩文件后又帮你自动部署了</li></ul><h3 id="新建文章自动打开本地Markdown编辑器"><a href="#新建文章自动打开本地Markdown编辑器" class="headerlink" title="新建文章自动打开本地Markdown编辑器"></a>新建文章自动打开本地Markdown编辑器</h3><blockquote><p>写新文章时，需要控制台执行hexo new “文章名字”生成一篇新文章，但需要手动打开，挺麻烦，我们可以设置在生成之后自动打开</p></blockquote><p>在站点根目录下新建scripts目录，然后在新建<code>auto_open.js</code>，在文件填入一下内容：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Hexo 2.x 用户复制这段</span><span class="token comment" spellcheck="true">//hexo.on('new', function(path){</span>  <span class="token comment" spellcheck="true">//spawn('start  "markdown编辑器绝对路径.exe" ' + path);</span><span class="token comment" spellcheck="true">//});</span><span class="token comment" spellcheck="true">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\program\typora\Typora\Typora.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>其中”D:\program\typora\Typora\Typora.exe”是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行<code>hexo cl &amp;&amp; hexo g -d</code>，部署到GitHub即可，以后在发布文章就会自动打开编辑器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为使用matery主题的hexo增加Valine评论系统</title>
      <link href="/2021/06/09/wei-shi-yong-matery-zhu-ti-de-hexo-zeng-jia-valine-ping-lun-xi-tong/"/>
      <url>/2021/06/09/wei-shi-yong-matery-zhu-ti-de-hexo-zeng-jia-valine-ping-lun-xi-tong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考<a href="https://fenghen0918.github.io/2020/06/19/hexo/matery-zhu-ti-valine-ping-lun-xi-tong/">matery主题+Valine评论系统</a></p></blockquote><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>上篇博客讲述了如何对hexo+GitHub的博客系统进行一些配置，由于配置评论系统较为复杂，故单独写本篇博客来记录如何为使用matery主题的hexo博客系统增加评论系统</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>由于本站博客系统使用的是<a href="https://console.leancloud.cn/">LeanCloud</a>提供的，因此先打开官网进行<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a>。</p><p>注册完成后直接选择创建应用，应用名称随便填，方案选择开发版，点击创建即可。</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609162216842.png" alt="创建应用"></p><p>创建完成后，点击设置</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609162337837.png" alt="进入设置"></p><p>我们需要用到AppID和AppKey。</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609162431565.png" alt="获取AppID和AppKey"></p><h2 id="配置评论系统"><a href="#配置评论系统" class="headerlink" title="配置评论系统"></a>配置评论系统</h2><p>在matery主题的配置文件<code>_config.yml</code>中，创建Valine属性：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span> 你的AppID  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> 你的AppKey  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10                </span><span class="token comment" spellcheck="true"># 每页显示条数</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> monsterid           <span class="token comment" spellcheck="true"># 默认头像</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN   <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> 昵称填写qq可以显示qq头像和昵称哦~   <span class="token comment" spellcheck="true"># 提示信息</span>  <span class="token key atrule">guest_info</span><span class="token punctuation">:</span> nick<span class="token punctuation">,</span>mail<span class="token punctuation">,</span>link   <span class="token key atrule">recordIP</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>  <span class="token key atrule">serverURLs</span><span class="token punctuation">:</span> <span class="token string">''</span>   <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png               <span class="token comment" spellcheck="true"># 背景图片</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token boolean important">true </span></code></pre><h2 id="管理评论"><a href="#管理评论" class="headerlink" title="管理评论"></a>管理评论</h2><p>进入<a href="https://console.leancloud.cn/apps">LeanCloud</a>，点击<code>数据存储</code>，选择<code>Comment</code>，然后你就可以操作数据了</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/%E5%88%A0%E9%99%A4%E8%AF%84%E8%AE%BA.gif" alt="删除评论"></p><h2 id="增强Valine系统"><a href="#增强Valine系统" class="headerlink" title="增强Valine系统"></a>增强Valine系统</h2><h3 id="更换Valine的版本"><a href="#更换Valine的版本" class="headerlink" title="更换Valine的版本"></a>更换Valine的版本</h3><p>在matery配置页面，找到libs.js.valine，将其设置为<code>    valine: https://unpkg.com/valine/dist/Valine.min.js</code></p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609164616769.png" alt="更改valine的版本"></p><h3 id="更换表情"><a href="#更换表情" class="headerlink" title="更换表情"></a>更换表情</h3><p>打开<code>themes\matery\layout\_partial</code>中找到<code>valine.ejs</code>，找到其中的<code>new Valine</code>，大概在249行，修改为以下内容：</p><pre class=" language-ejs"><code class="language-ejs">new Valine({        el: '#vcomments',        appId: '<%- theme.valine.appId %>',        appKey: '<%- theme.valine.appKey %>',        notify: '<%- theme.valine.notify %>' === 'true',        verify: '<%- theme.valine.verify %>' === 'true',        visitor: '<%- theme.valine.visitor %>' === 'true',        avatar: '<%- theme.valine.avatar %>',        pageSize: '<%- theme.valine.pageSize %>',        lang: '<% if (config.language == "zh-CN") {  %>zh-cn<% } else { %>en<% } %>',        placeholder: '<%= theme.valine.placeholder %>',        enableQQ: true,        emojiCDN: '//i0.hdslb.com/bfs/emote/',         // 表情title和图片映射        emojiMaps: {        "tv_doge": "6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png",        "tv_亲亲": "a8111ad55953ef5e3be3327ef94eb4a39d535d06.png",        "tv_偷笑": "bb690d4107620f1c15cff29509db529a73aee261.png",        "tv_再见": "180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png",        "tv_冷漠": "b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png",        "tv_发怒": "34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png",        "tv_发财": "34db290afd2963723c6eb3c4560667db7253a21a.png",        "tv_可爱": "9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png",        "tv_吐血": "09dd16a7aa59b77baa1155d47484409624470c77.png",        "tv_呆": "fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png",        "tv_呕吐": "9f996894a39e282ccf5e66856af49483f81870f3.png",        "tv_困": "241ee304e44c0af029adceb294399391e4737ef2.png",        "tv_坏笑": "1f0b87f731a671079842116e0991c91c2c88645a.png",        "tv_大佬": "093c1e2c490161aca397afc45573c877cdead616.png",        "tv_大哭": "23269aeb35f99daee28dda129676f6e9ea87934f.png",        "tv_委屈": "d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png",        "tv_害羞": "a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png",        "tv_尴尬": "7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png",        "tv_微笑": "70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png",        "tv_思考": "90cf159733e558137ed20aa04d09964436f618a1.png",        "tv_惊吓": "0d15c7e2ee58e935adc6a7193ee042388adc22af.png",        "tv_打脸": "56ab10b624063e966bfcb76ea5dc4794d87dfd47.png",        "tv_抓狂": "fe31c08edad661d63762b04e17b8d5ae3c71a757.png",        "tv_抠鼻": "c666f55e88d471e51bbd9fab9bb308110824a6eb.png",        "tv_斜眼笑": "911f987aa8bc1bee12d52aafe62bc41ef4474e6c.png",        "tv_无奈": "ea8ed89ee9878f2fece2dda0ea8a5dbfe21b5751.png",        "tv_晕": "5443c22b4d07fb1907ccc610c8e6db254f2461b7.png",        "tv_流汗": "cead1c351ab8d79e9f369605beb90148db0fbed3.png",        "tv_流泪": "7e71cde7858f0cd50d74b0264aa26db612a8a167.png",        "tv_流鼻血": "c32d39db2737f89b904ca32700d140a9241b0767.png",        "tv_点赞": "f85c354995bd99e28fc76c869bfe42ba6438eff4.png",        "tv_生气": "26702dcafdab5e8225b43ffd23c94ac1ff932654.png",        "tv_生病": "8b0ec90e6b86771092a498c54f09fc94621c1900.png",        "tv_疑问": "0793d949b18d7be716078349c202c15ff166f314.png",        "tv_白眼": "c1d59f439e379ee50eef488bcb5e5378e5044ea4.png",        "tv_皱眉": "72ccad6679fea0d14cce648b4d818e09b8ffea2d.png",        "tv_目瞪口呆": "0b8cb81a68de5d5365212c99375e7ace3e7891b7.png",        "tv_睡着": "8b196675b53af58264f383c50ad0945048290b33.png",        "tv_笑哭": "1abc628f6d4f4caf9d0e7800878f4697abbc8273.png",        "tv_腼腆": "89712c0d4af73e67f89e35cbc518420380a7f6f4.png",        "tv_色": "61822c7e9aae5da76475e7892534545336b23a6f.png",        "tv_调侃": "4bc022533ef31544ca0d72c12c808cf4a1cce3e3.png",        "tv_调皮": "b9c41de8e82dd7a8515ae5e3cb63e898bf245186.png",        "tv_鄙视": "6e72339f346a692a495b123174b49e4e8e781303.png",        "tv_闭嘴": "c9e990da7f6e93975e25fd8b70e2e290aa4086ef.png",        "tv_难过": "87f46748d3f142ebc6586ff58860d0e2fc8263ba.png",        "tv_馋": "fc7e829b845c43c623c8b490ee3602b7f0e76a31.png",        "tv_鬼脸": "0ffbbddf8a94d124ca2f54b360bbc04feb6bbfea.png",        "tv_黑人问号": "45821a01f51bc867da9edbaa2e070410819a95b2.png",        "tv_鼓掌": "1d21793f96ef4e6f48b23e53e3b9e42da833a0f6.png"        },        requiredFields: ['nick','mail'], //设置必填项    });</code></pre><p>重新部署查看</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> hexo g -d</code></pre><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609165023460.png" alt="评论板块界面"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+GitHub个人主页更换主题</title>
      <link href="/2021/06/09/hexo-github-ge-ren-zhu-ye-geng-huan-zhu-ti/"/>
      <url>/2021/06/09/hexo-github-ge-ren-zhu-ye-geng-huan-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>上一篇博客我为大家介绍了如何使用hexo+GitHub搭建个人博客，本片我将记录我如何更换hexo的主题matery。</p><h2 id="主题的下载与切换"><a href="#主题的下载与切换" class="headerlink" title="主题的下载与切换"></a>主题的下载与切换</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>hexo主题的官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>matery主题官网：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>可以在官网的release里面下载，也可以使用<code>git clone https://github.com/blinkfox/hexo-theme-matery.git </code>下载，将下载的文件夹放到博客文件夹下的themes下。</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609110153569.png" alt="themes文件夹"></p><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><p>在博客文件夹下，打开<code>_config.yml</code>文件，将<code>theme</code>设置为你的主题名字。</p><h2 id="主题的配置"><a href="#主题的配置" class="headerlink" title="主题的配置"></a>主题的配置</h2><h3 id="增加页面"><a href="#增加页面" class="headerlink" title="增加页面"></a>增加页面</h3><p>增加tags标签页、categories分类页、about关于我页面、contact留言板页。</p><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-06-8 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-06-8 17:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-06-8 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h4 id="新建留言板-contact-页"><a href="#新建留言板-contact-页" class="headerlink" title="新建留言板 contact 页"></a>新建留言板 contact 页</h4><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-06-8 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h4 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h4><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class=" language-bash"><code class="language-bash">hexo new page 404</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-06-8 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span></code></pre><h3 id="增加emoji支持"><a href="#增加emoji支持" class="headerlink" title="增加emoji支持"></a>增加emoji支持</h3><p>:smile：使你的markdown博客里的emoji表情跳动起来</p><p>安装插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在博客文件夹下增加下面配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span></code></pre><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609113107377.png" alt="emoji表情示例"></p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题不好看，所以我们采用一个插件来代替它。</p><p>使用<code>npm i -S hexo-prism-plugin</code>来安装插件</p><p>打开项目文件夹下的<code>_config.yml</code>，将 highlight.enable 的值改为 false ，新增下面的代码。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span></code></pre><h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>我们使用 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><h3 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h3><p>为了在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 文章信息--若要开启文章字数统计，需要安装 hexo-wordcount 插件，安装命令: `npm i --save hexo-wordcount`</span><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 发布日期</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 更新日期</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 文章字数统计</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 站点总文章字数</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 文章阅读时长</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 文章阅读次数</span></code></pre><h3 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐放松一下吧  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">2799574927     </span><span class="token comment" spellcheck="true"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false      </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">hideLrc</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true"># 隐藏歌词</span></code></pre><blockquote><p>属性介绍：</p><ol><li><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），<code>baidu</code>（百度音乐）。</p></li><li><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p></li><li><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code>即为这串数字。</p></li></ol></blockquote><h3 id="修改公告-dream一栏-里的每日一句"><a href="#修改公告-dream一栏-里的每日一句" class="headerlink" title="修改公告(dream一栏)里的每日一句"></a>修改公告(dream一栏)里的每日一句</h3><p>找到<code>/themes/matery/layout/index.ejs</code>，第17行改为：</p><pre class=" language-ejs"><code class="language-ejs"><% if (theme.dream.enable) { %>  <!-- <%- partial('_widget/dream') %> -->  <i class="fa fa-volume-up fa-lg fa-fw text-color"></i> <%- '<span id="hitokoto">一言API请求超时。请稍后重试。</span> （来源：一言API）' %><% } %></code></pre><p>同时在<code>/themes/matery/layout/_partial/head.ejs</code>增加代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://v1.hitokoto.cn/?c=d&amp;encode=js&amp;select=%23hitokoto"</span> defer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub搭建个人博客</title>
      <link href="/2021/06/08/hexo-github-da-jian-ge-ren-bo-ke/"/>
      <url>/2021/06/08/hexo-github-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本篇博客技术了如何使用hexo+GitHub搭建个人博客。gitee至今年五月开始休整个人主页，暂时无法搭建。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>git下载地址：<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></p><p>验证git是否安装完成：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre><p>出现下面的信息即安装完成。</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210608225744230.png" alt="查看git是否安装成功"></p><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>node.js下载地址：<a href="https://nodejs.org/zh-cn/download/">下载 | Node.js (nodejs.org)</a></p><p>验证node是否安装成功</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><p>出现下面的信息即代表安装完成：</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210608230136589.png" alt="产看node是否安装成功"></p><h3 id="GitHub仓库"><a href="#GitHub仓库" class="headerlink" title="GitHub仓库"></a>GitHub仓库</h3><p>创建一个GitHub的账号，当然gitee也可以。</p><p>GitHub地址：<a href="https://github.com/">https://github.com/</a></p><p>Gitee地址：<a href="https://gitee.com/">https://gitee.com/</a></p><p>在注册好以后创建一个新仓库</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609085515819.png" alt="新建仓库"></p><p>仓库名构成为：用户名.github.io</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609085818668.png" alt="创建仓库"></p><h2 id="安装hexo并且本地运行"><a href="#安装hexo并且本地运行" class="headerlink" title="安装hexo并且本地运行"></a>安装hexo并且本地运行</h2><p>创建一个文件夹，用于存放你的博客</p><pre class=" language-bash"><code class="language-bash">//切换到所在磁盘位置e://切换到文件夹位置<span class="token function">cd</span> myBlog</code></pre><p>安装hexo-cli脚手架</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>用<code>hexo -v</code>验证hexo-cli脚手架是否安装完成</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609090103875.png" alt="查看hexo版本"></p><p>使用<code>hexo init</code>初始化网站，如果报错或者安装不成功，就去<a href="https://github.com/hexojs/hexo-starter">hexojs/hexo-starter(github.com)</a>将代码下载下来，放到你的目录下。</p><p>然后进入网站所在文件夹，执行<code>npm install</code>命令，安装必备的组件。完成安装后，页面结构如图所示</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── _config.yml <span class="token comment" spellcheck="true"># 网站的配置信息，您可以在此配置大部分的参数。 </span>├── package.json├── node_modules <span class="token comment" spellcheck="true"># 组件所在文件夹</span>├── scaffolds <span class="token comment" spellcheck="true"># 模版文件夹</span>├── <span class="token function">source</span>  <span class="token comment" spellcheck="true"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><span class="token operator">|</span>   ├── _drafts <span class="token comment" spellcheck="true"># 草稿文件</span><span class="token operator">|</span>   └── _posts <span class="token comment" spellcheck="true"># 文章Markdowm文件 </span>└── themes  <span class="token comment" spellcheck="true"># 主题文件夹</span></code></pre><p>使用<code>hexo g</code>即可生成静态网页，可在public里面找到。然后运行<code>hexo s</code>打开本地服务器，就可以查看，这是我更换主题matery后的界面，具体后面会写。</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609091349215.png" alt="静态主页"></p><h2 id="连接GitHub与本地git"><a href="#连接GitHub与本地git" class="headerlink" title="连接GitHub与本地git"></a>连接GitHub与本地git</h2><h3 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh key"></a>配置ssh key</h3><p>右击鼠标，选中<code>Git Bash Here</code>，打开git界面，开始配置ssh key。</p><p>输入<code>ssh-keygen -t rsa -C '你的邮箱'</code></p><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">'howyoung525@foxmail.com'</span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/c/Users/84661/.ssh/id_rsa<span class="token punctuation">)</span>: 可以在此输入你的文件保存地址，默认为~/.ssh/id_rsa,建议换成~/.ssh/id_rsa.githubEnter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> /c/Users/84661/.ssh/id_rsaYour public key has been saved <span class="token keyword">in</span> /c/Users/84661/.ssh/id_rsa.pubThe key fingerprint is:SHA256:oFnXNTgDePDBcW6j2xp9mTpbheokQ0JjM+3nLvtxqfA howyoung525@foxmail.comThe key's randomart image is:+---<span class="token punctuation">[</span>RSA 3072<span class="token punctuation">]</span>----+<span class="token operator">|</span>      .++o<span class="token punctuation">..</span>o    <span class="token operator">|</span><span class="token operator">|</span>      .oo<span class="token operator">=</span>+. <span class="token keyword">.</span>   <span class="token operator">|</span><span class="token operator">|</span>      O.+ <span class="token operator">=</span>o     <span class="token operator">|</span><span class="token operator">|</span>     * B o <span class="token keyword">.</span> <span class="token keyword">.</span>   <span class="token operator">|</span><span class="token operator">|</span>    o <span class="token keyword">.</span> S <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span>  <span class="token operator">|</span><span class="token operator">|</span>       o * <span class="token keyword">.</span> <span class="token operator">=</span>   <span class="token operator">|</span><span class="token operator">|</span>        * B B    <span class="token operator">|</span><span class="token operator">|</span>        .@.B     <span class="token operator">|</span><span class="token operator">|</span>        o+Eo     <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+</code></pre><p>输入命令<code>cat ~/.ssh/id_rsa.github.pub</code>，查看公钥文件，然后选中，右击复制。</p><p>打开你的GitHub，点击右上角头像旁边的倒三角，选择<code>settings</code>，在点击<code>SSH adn GPG keys</code>，点击<code>new</code>，在页面里添加title和key，title可以随意写，key把公钥文件内容粘贴进去即可。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/sehowyoung/images/raw/master/%E9%85%8D%E7%BD%AE.gif" alt="git与GitHub连接配置"></h2><h3 id="配置本地账户"><a href="#配置本地账户" class="headerlink" title="配置本地账户"></a>配置本地账户</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">'你的用户名'</span><span class="token function">git</span> config --global user.email <span class="token string">'你的邮箱'</span></code></pre><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p>使用<code>ssh -T git@github.com</code>来测试是否成功，出现下面信息即成功（第一会让输入yes）</p><p><img src="https://gitee.com/sehowyoung/images/raw/master/image-20210609094359872.png" alt="测试连接"></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p>安装插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>打开文件夹下面的<code>_config.yml</code>文件，找到最下面的<code>delpoy</code>，修改配置为：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span>    <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>你的GitHub用户名/用户名.github.io.git</code></pre><p>使用<code>hexo g -d</code>生成静态文件并上传。</p><p>稍等一会，便可以在浏览器访问<code>https://你的用户名.github.io</code>，即可看见你的博客了。</p><p>此外，最好将<code>_config.yml</code>文件最前端的6-12行进行修改：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> howyoung's blog<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> howyoung's blog<span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'howyoung 的博客'</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> blog 博客 howyoung<span class="token key atrule">author</span><span class="token punctuation">:</span> howyoung<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai<span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//sehowyoung.github.io/<span class="token key atrule">per_page</span><span class="token punctuation">:</span> 建议改为6的倍数</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
